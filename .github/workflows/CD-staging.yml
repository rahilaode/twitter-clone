# This workflow will run automation deployment to staging servers.
# Triggers : Push or Merge to Main
# Jobs : Deploy to staging
name: Deploy Staging ðŸš€

on:
  push:
    branches: [ "main" ]

jobs:
    deploy-staging:
        name: Deploy to staging server
        runs-on: ubuntu-latest
        environment: staging
        steps:
            - name: Execute deployment command
              uses: appleboy/ssh-action@v1.0.3
              env:
                APP_PORT: ${{ secrets.APP_PORT }}
                MONGO_URI_STG: ${{ secrets.MONGO_URI_STG }}
                NODE_ENV_STG: ${{ vars.NODE_ENV_STG }}
                GIT_URL: ${{ secrets.GIT_URL }}
                
              with:
                host: ${{ secrets.SSH_HOST_STAGING }}
                username: ${{ secrets.SSH_USER_NAME_STAGING }}
                key: ${{ secrets.SSH_PRIVATE_KEY_STAGING }}
                envs: APP_PORT, MONGO_URI_STG, NODE_ENV_STG, GIT_URL
                script: |
                  if [[ -d "/home/ubuntu/x-clone" ]]; then 
                    cd /home/ubuntu/x-clone
                    sudo docker compose --file docker-compose.stg.yaml down
                    git pull origin main
                  else
                    ssh-keyscan github.com > ~/.ssh/known_hosts
                    git clone $GIT_URL /home/ubuntu/x-clone
                    cd /home/ubuntu/x-clone
                  fi
                  
                  echo "APP_PORT=$APP_PORT" > .env
                  echo "MONGO_URI_STG=$MONGO_URI_STG" >> .env
                  echo "JWT_SECRET_STG=`openssl rand -base64 32`" > .env
                  echo "NODE_ENV_STG=$NODE_ENV_STG" >> .env

                  sudo docker compose --file docker-compose.stg.yaml up --build --detach

            - name: Test Hit Endpoint
              run: |
                sleep 20
                curl ${{ secrets.STG_URL }}

