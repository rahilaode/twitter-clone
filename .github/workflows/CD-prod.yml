# This workflow will run automation deployment to production servers.
# Triggers : Publish the release app or edit the latest release
name: Deploy Production ðŸš€

on:
  release:
    types: 
      - published
      - edited

jobs:
  deploy-production:
    name: Deploy to production server ðŸš€
    runs-on: ubuntu-latest
    environment: production
    steps:
        - name: Execute deployment command
          uses: appleboy/ssh-action@v1.0.3
          env:
            GIT_URL: ${{ secrets.GIT_URL }}
            MONGO_URI_PROD: ${{ secrets.MONGO_URI_PROD }}
            NODE_ENV_PROD: ${{ vars.NODE_ENV_PROD }}
            APP_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/x-clone
            APP_TAG: ${{ github.event.release.tag_name }}
            APP_PORT: ${{ secrets.APP_PORT }}
            
          with:
            host: ${{ secrets.SSH_HOST_PRODUCTION }}
            username: ${{ secrets.SSH_USER_NAME_PRODUCTION }}
            key: ${{ secrets.SSH_PRIVATE_KEY_PRODUCTION }}
            envs: GIT_URL, MONGO_URI_PROD, NODE_ENV_PROD, APP_IMAGE, APP_TAG, APP_PORT
            script: |
              if [[ -d "/home/ubuntu/x-clone" ]]; then 
                cd /home/ubuntu/x-clone
                sudo docker compose --file docker-compose.prod.yaml down
                git pull origin main
              else
                ssh-keyscan github.com > ~/.ssh/known_hosts
                git clone $GIT_URL /home/ubuntu/x-clone
                cd /home/ubuntu/x-clone
              fi

              echo "MONGO_URI_PROD=$MONGO_URI_PROD" > .env
              echo "APP_PORT=$APP_PORT" >> .env
              echo "JWT_SECRET_PROD=`openssl rand -base64 32`" >> .env
              echo "APP_IMAGE=$APP_IMAGE" >> .env
              echo "APP_TAG=$APP_TAG" >> .env

              sudo docker compose --file docker-compose.prod.yaml up --build --detach

        - name: Test Hit Endpoint
          run: |
            sleep 20
            curl ${{ secrets.PROD_URL }}